plot(cars)
data()
data(JohnsonJohnson)
data(JohnsonJohnson)
data(JohnsonJohnson)
data()
start(JohnsonJohnson)
start(JohnsonJohnson)
reticulate::repl_python()
reticulate::repl_python()
import pandas as pd
reticulate::repl_python()
yes
reticulate::repl_python()
y
reticulate::repl_python()
import pandas as pd
yes
end(JohnsonJohnson)
start(JohnsonJohnson)
start(JohnsonJohnson)
start(JohnsonJohnson)
start(JohnsonJohnson)
start(JohnsonJohnson)
end(JohnsonJohnson)
class(JohnsonJohnson)
plot(JohnsonJohnson)
plot(JohnsonJohnson)
JohnsonJohnson
print(JohnsonJohnson)
grid.table(JohnsonJohnson)
table(JohnsonJohnson)
grid(JohnsonJohnson)
grid.table(JohnsonJohnson)
library(sjPlot)
install.packages("sjPlot")
library(sjPlot)
tab_model(JohnsonJohnson)
dados <- read.table(JohnsonJohnson)
dados <- read.csv(JohnsonJohnson)
dados <- read.csv(JohnsonJohnsonheader = TRUE, sep = ";", dec = ",")
dados <- read.csv(JohnsonJohnson, header = TRUE, sep = ";", dec = ",")
head(JohnsonJohnson)
tail(JohnsonJohnson)
data(JohnsonJohnson)
str(JohnsonJohnson)
end(JohnsonJohnson)
data("JohnsonJohnson")
str(JohnsonJohnson)
data("JohnsonJohnson")
str(JohnsonJohnson)
data("JohnsonJohnson")
str(JohnsonJohnson)
data("JohnsonJohnson")
str(JohnsonJohnson)
write.table(JohnsonJohnson, file = "dados/iris.csv")
write.table(JohnsonJohnson)
data("JohnsonJohnson")
write.table(JohnsonJohnson)
data(JohnsonJohnson)
write.table(JohnsonJohnson)
write.table(JohnsonJohnson, row.names = FALSE, sep = ";", dec = ",")
data(JohnsonJohnson)
data(JohnsonJohnson)
write.table(JohnsonJohnson, row.names = FALSE, sep = ";", dec = ",")
data(JohnsonJohnson)
data(JohnsonJohnson)
write.table(JohnsonJohnson, row.names = FALSE,
sep = ";", dec = ",")
JohnsonJohnson
data(JohnsonJohnson)
JohnsonJohnson
Johnson <- data(JohnsonJohnson)
Johnson
Johnson <- data(JohnsonJohnson)
Johnson <- data(JohnsonJohnson)
Johnson
data(JohnsonJohnson)
JohnsonJohnson
start(JohnsonJohnson)
end(JohnsonJohnson)
plot(JohnsonJohnson)
class(JohnsonJohnson)
plot(JohnsonJohnson, Xlab= 'Anos', ylab = 'Qtr1', type='o')
plot(JohnsonJohnson, Xlab= 'x', ylab = 'Qtr1', type='o')
plot(JohnsonJohnson, type='o')
fit1 = ets(JohnsonJohnson)
plot(JohnsonJohnson, main='Johnson&Johnosn earnings per share', col='blue', lwd=3)
plot(JohnsonJohnson, main='Lucro trimestral por ação da Johnson & Johnson', col='blue', lwd=3)
jj.log.return=diff(log(JohnsonJohnson))
jj.log.return=diff(log(JohnsonJohnson))
jj.log.return.mean.zero=jj.log.return-mean(jj.log.return)
par(mfrow=c(3,1))
plot(jj.log.return.mean.zero, main='Log-return (mean zero) of Johnson&Johnosn earnings per share')
acf(jj.log.return.mean.zero, main='ACF')
pacf(jj.log.return.mean.zero, main='PACF')
bibliotecas = c('forecast', 'fpp2', 'readx1')
install.packages(bibliotecas)
library(forecast)
library(fpp2)
library(readx1)
bibliotecas = c('forecast', 'fpp2', 'readxl')
install.packages(bibliotecas)
install.packages(bibliotecas)
library(forecast)
library(fpp2)
library(readx1)
library(forecast)
library(fpp2)
library(readxl)
autoplot(gold)
autoplot(JohnsonJohnson)
decompose2 <- decompose(JohnsonJohnson)
autoplot(decompose2)
data(JohnsonJohnson)
data(JohnsonJohnson)
data(JohnsonJohnson)
data(JohnsonJohnson)
data(JohnsonJohnson)
data(JohnsonJohnson)
data(JohnsonJohnson)
JohnsonJohnson
start(JohnsonJohnson)
end(JohnsonJohnson)
class(JohnsonJohnson)
end(JohnsonJohnson)
class(JohnsonJohnson)
class(JohnsonJohnson)
plot(JohnsonJohnson)
plot(JohnsonJohnson, main='Lucro trimestral por ação da Johnson & Johnson', col='blue', lwd=3)
bibliotecas = c('forecast', 'fpp2', 'readxl')
install.packages(bibliotecas)
install.packages(bibliotecas)
#library(forecast)
#library(fpp2)
#library(readxl)
autoplot(gold)
library(forecast)
library(fpp2)
library(readxl)
autoplot(gold)
autoplot(JohnsonJohnson)
decompose2 <- decompose(JohnsonJohnson)
autoplot(decompose2)
ggseasonplot(JohnsonJohnson)
autoplot(JohnsonJohnson)
decompair <- decompose(JohnsonJohnson, type='additive')
plot(decompair)
ggseasonplot(JohnsonJohnson)
library(fpp2)
library(fpp2)
library(fpp2)
library(fpp2)
autoplot(JohnsonJohnson)
decompJohnsonJohnson<-decompose(JohnsonJohnson)
autoplot(decompJohnsonJohnson)
decompair<-decompose(JohnsonJohnson,type='additive')
plot(decompair)
ggseasonplot(JohnsonJohnson)
autoplot(JohnsonJohnson)
mdl1 <- ses(JohnsonJohnson, h = 16)
mdl1$model
autoplot(mdl1)
mdl2 <- holt(JohnsonJohnson, h = 16)
autoplot(mdl2)
autoplot(JohnsonJohnson) + ylab("JohnsonJohnson dados Quadrimestrais")
decompJohnsonJohnson <- decompose(JohnsonJohnson)
autoplot(decompJohnsonJohnson)
autoplot(JohnsonJohnson) + ylab("JohnsonJohnson dados Quadrimestrais")
decompJohnsonJohnson <- decompose(JohnsonJohnson)
autoplot(decompJohnsonJohnson)
mdladitivo_JohnsonJohnson <- hw(JohnsonJohnson, seasonal = "additive", h=36)
autoplot(mdladitivo_JohnsonJohnson)
library(fpp2)
mdlmultiplicativo_JohnsonJohnson <- hw(JohnsonJohnson, seasonal = "multiplicative", h=36)
autoplot(mdlmultiplicativo_JohnsonJohnson)
mdladitivo_JohnsonJohnson <- hw(JohnsonJohnson, seasonal = "additive", h=36, PI=F)
mdlmultiplicativo_JohnsonJohnson <- hw(JohnsonJohnson, seasonal = "multiplicative", h=36, PI=F)
autoplot(JohnsonJohnson) + ylab("JohnsonJohnson dados Quadrimestrais") +
autolayer(mdladitivo_JohnsonJohnson, series = "HW Add.") +
autolayer(mdlmultiplicativo_JohnsonJohnson, series = "HW Mult.")
data_forecast
library(fpp2)
library(tidyverse)
install.packages("tidyverse")
autoplot(JohnsonJohnson)
log_data_series <- log(JohnsonJohnson)
data_forecast <- HoltWinters(log_data_series)
data_forecast
log_data_series <- log(JohnsonJohnson)
data_forecast <- HoltWinters(log_data_series)
data_forecast
plot(data_forecast)
data_forecast_extended <- forecast(data_forecast, h = 60)
plot(data_forecast_extended)
residuals <- data_forecast_extended$residuals
residuals <- residuals[!is.na(residuals)]
acf(residuals, lag.max=20)
Box.test(residuals, lag=20, type="Ljung-Box")
plot.ts(residuals)
qqnorm(residuals);qqline(residuals, col = 2)
duq <- read.csv('../input/hourly-energy-consumption//DUQ_hourly.csv', stringsAsFactors = F)
duq <- read.csv('../input/hourly-energy-consumption//DUQ_hourly.csv', stringsAsFactors = F)
duq <- read.csv('../input/hourly-energy-consumption//DUQ_hourly.csv', stringsAsFactors = F)
duq <- read.csv('duq.csv', stringsAsFactors = F)
head(duq,10)
duq$Datetime <- as.POSIXct(duq$Datetime, '%Y-%m-%d %H:%M:%S', tz = "EDT")
duq <- duq[duq$Datetime >= '2012-10-01 00:00:00' & duq$Datetime <= '2017-09-30 00:00:00',]
library(ggplot2)
duq <- read.csv('arquivos/DUQ_hourly.csv', stringsAsFactors = F)
head(duq,10)
duq$Datetime <- as.POSIXct(duq$Datetime, '%Y-%m-%d %H:%M:%S', tz = "EDT")
duq <- duq[duq$Datetime >= '2012-10-01 00:00:00' & duq$Datetime <= '2017-09-30 00:00:00',]
library(ggplot2)
duq <- read.csv('arquivos/DUQ_hourly.csv', stringsAsFactors = F)
head(duq,10)
duq$Datetime <- as.POSIXct(duq$Datetime, '%Y-%m-%d %H:%M:%S', tz = "Asia/Seoul")
duq <- duq[duq$Datetime >= '2012-10-01 00:00:00' & duq$Datetime <= '2017-09-30 00:00:00',]
library(ggplot2)
duq <- read.csv('arquivos/DUQ_hourly.csv', stringsAsFactors = F)
head(duq,10)
duq$Datetime <- as.POSIXct(duq$Datetime, '%Y-%m-%d %H:%M:%S', tz = "Asia/Seoul")
duq <- duq[duq$Datetime >= '2012-10-01 00:00:00' & duq$Datetime <= '2017-09-30 00:00:00',]
library(ggplot2)
duq <- read.csv('arquivos/DUQ_hourly.csv', stringsAsFactors = F)
head(duq,10)
duq$Datetime <- as.POSIXct(duq$Datetime, '%Y-%m-%d %H:%M:%S', tz = "Asia/Seoul")
duq <- duq[duq$Datetime >= '2012-10-01 00:00:00' & duq$Datetime <= '2017-09-30 00:00:00',]
library(ggplot2)
ggplot(data = duq, aes(x = Datetime, y = DUQ_MW))+
geom_line(color = "#00AFBB", size = 0.5) + ggtitle('Duquesne Power - Consumption, 2012-2017')+
xlab('Date') + ylab('Consumption in MW')
ggplot(data = duq[duq$Datetime >= '2014-01-01' & duq$Datetime <= '2014-12-31',], aes(x = Datetime, y = DUQ_MW))+
geom_line(color = "#00AFBB", size = 0.5) + ggtitle('Duquesne Power - Consumption, 2014')+
xlab('Date') + ylab('Consumption in MW')
library(forecast)
library(lubridate)
duq_train <- duq[duq$Datetime <= '2017-08-31',]
duq_test <- duq[duq$Datetime >= '2017-09-01',]
msts_power <- msts(duq_train$DUQ_MW, seasonal.periods = c(24,169,24*365.25), start = decimal_date(as.POSIXct("2012-10-01 00:00:00")))
library(forecast)
library(lubridate)
duq_train <- duq[duq$Datetime <= '2017-08-31',]
duq_test <- duq[duq$Datetime >= '2017-09-01',]
msts_power <- msts(duq_train$DUQ_MW, seasonal.periods = c(24,169,24*365.25), start=decimal_date(as.POSIXct("2012-10-01 00:00:00")))
mean_baseline <- meanf(msts_power,h = 24*31)
autoplot(mean_baseline)+geom_line(color = "#00AFBB", size = 0.5) + ggtitle('Duquesne Power - Consumption, 2014')+
xlab('Date') + ylab('Consumption in MW')
accuracy(mean_baseline,duq_test$DUQ_MW)
tbats_power <- tbats(msts_power)
tbats_power <- tbats(msts_power)
